# -*- coding: utf-8 -*-
"""Dataset Creation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15rM62NhMDglc6XmOaKLB1TgA1thOLd5G

Oscar Dataset Creation
"""

import pandas as pd

# Read the acting data
acting_data = pd.read_csv("oscardata_acting.csv")

# Read the director data
director_data = pd.read_csv("oscardata_bestdirector.csv")

# Read the best picture data
picture_data = pd.read_csv("oscardata_bestpicture.csv")

# Define a function to rename columns
def rename_columns(df, suffix):
    renamed_columns = {}
    for column in df.columns:
        renamed_columns[column] = f"{column}_{suffix}"
    df.rename(columns=renamed_columns, inplace=True)

# Replace suffixes with "_actor" for acting_data columns
rename_columns(acting_data, "actor")

# Replace suffixes with "_director" for director_data columns
rename_columns(director_data, "director")

# Replace suffixes with "_film" for picture_data columns
rename_columns(picture_data, "film")

# Merge the acting_data, director_data, and picture_data DataFrames
merged_data1 = acting_data.merge(director_data, left_on=["Year_actor", "Film_actor"], right_on=["Year_director", "Film_director"], how="inner")

merged_data = merged_data1.merge(picture_data, left_on=["Year_actor", "Film_actor"], right_on=["Year_film", "Film_film"], how="inner")

# Save the merged_data DataFrame to a new CSV file
merged_data.to_csv("merged_oscar_data.csv", index=False)

"""Here Merge Oscar Data Created

We combine merge oscar data with tmdb 5000 movies data
"""

import pandas as pd

# Read the previously merged Oscar data
merged_data = pd.read_csv("merged_oscar_data.csv")

# Read the TMDB dataset
tmdb_data = pd.read_csv("tmdb_5000_movies.csv")

# Merge the two DataFrames based on the movie title
merged_data_tmdb = merged_data.merge(tmdb_data, left_on="Film_film", right_on="original_title", how="inner")

# List of columns to be dropped
columns_to_drop = [
    'Nowin_SAG_acting_actor', 'Win_SAG_acting_actor', 'Nonom_SAG_acting_actor', 'Nom_SAG_acting_actor',
    'Nowin_SAG_bestcast_actor', 'Win_SAG_bestcast_actor', 'Nonom_SAG_bestcast_actor', 'Nom_SAG_bestcast_actor',
    'Nowin_SAG_bestcast_film', 'Win_SAG_bestcast_film', 'Nonom_SAG_bestcast_film', 'Nom_SAG_bestcast_film',
    'Nowin_Criticschoice_actor', 'Win_Criticschoice_actor', 'Nonom_Criticschoice_actor', 'Nom_Criticschoice_actor',
    'Nowin_Criticschoice_director', 'Win_Criticschoice_director', 'Nonom_Criticschoice_director', 'Nom_Criticschoice_director',
    'Nowin_Criticschoice_film', 'Win_Criticschoice_film', 'Nonom_Criticschoice_film', 'Nom_Criticschoice_film',
    'Age_[0-25]_actor', 'Age_[25-35]_actor', 'Age_[35-45]_actor', 'Age_[45-55]_actor', 'Age_[55-65]_actor', 'Age_[65-75] _actor', 'Age_[75+] _actor',
    'MPAA_rating_actor', 'MPAA_G_actor', 'MPAA_PG_actor', 'MPAA_PG-13_actor', 'MPAA_R_actor', 'MPAA_NC-17_actor',
    'MPAA_rating_director', 'MPAA_G_director', 'MPAA_PG_director', 'MPAA_PG-13_director', 'MPAA_R_director', 'MPAA_NC-17_director',
    'MPAA_rating_film', 'MPAA_G_film', 'MPAA_PG_film', 'MPAA_PG-13_film', 'MPAA_R_film', 'MPAA_NC-17_film',
    'Release_Q1_actor', 'Release_Q2_actor', 'Release_Q3_actor', 'Release_Q4_actor', 'Release_date_actor', 'Birthyear_actor',
    'Film_actor', 'Film_director'
]

# Drop the specified columns from the DataFrame
merged_data_tmdb = merged_data_tmdb.drop(columns=columns_to_drop)

# Save the merged DataFrame to a new CSV file
merged_data_tmdb.to_csv("merged_data_all.csv", index=False)

"""All Data Preprocessing"""

import pandas as pd

# Load the joined dataset
# Replace 'your_dataset.csv' with the actual file path
dataset = pd.read_csv('merged_data_all.csv')

# Handling missing values
# For numeric columns, replace missing values with 0
numeric_columns = dataset.select_dtypes(include=['number'])
dataset[numeric_columns.columns] = dataset[numeric_columns.columns].fillna(0)

# For string columns, replace missing values with "empty"
string_columns = dataset.select_dtypes(include=['object'])
dataset[string_columns.columns] = dataset[string_columns.columns].fillna("empty")

# Trimming text fields
dataset[string_columns.columns] = dataset[string_columns.columns].apply(lambda x: x.str.strip() if x.dtype == "object" else x)

# Identifying redundant columns
redundant_columns = []

# Loop through each column to check for redundancy
for col1 in dataset.columns:
    for col2 in dataset.columns:
        # Skip comparing the column to itself
        if col1 != col2:
            # Check if the values in both columns are the same
            if dataset[col1].equals(dataset[col2]) and col2 not in redundant_columns and col1 not in redundant_columns:
                redundant_columns.append(col2)
print(redundant_columns)
dataset = dataset.drop(columns=redundant_columns)


# Save the merged DataFrame to a new CSV file
dataset.to_csv("preprocessed_data.csv", index=False)
# Now, the 'dataset' DataFrame is cleaned and ready for machine learning.
# You can proceed to build your machine learning models with this DataFrame.

import pandas as pd

# Load your dataset (replace 'your_dataset.csv' with the actual file name)
dataset = pd.read_csv('preprocessed_data.csv')

# Display all column names
print("Column Names:")
print(dataset.columns)

"""Analysis preprocessing Dataset

"""

import pandas as pd
import matplotlib.pyplot as plt


df = pd.read_csv("preprocessed_data.csv")

film_unique_values = df['Film_film'].unique()
actor_unique_values = df['Nominee_actor'].unique()
director_unique_values = df['Nominee_director'].unique()

Nom_GoldenGlobe = df[df.columns[df.columns.str.startswith("Nom_GoldenGlobe")+df.columns.str.startswith("Nom_BAFTA")+df.columns.str.startswith("Oscarstat_totalnoms")]]
Win_GoldenGlobe = df[df.columns[df.columns.str.startswith("Win_GoldenGlobe")+df.columns.str.startswith("Win_BAFTA")+df.columns.str.startswith("Oscarstat_previouswins")]]

total_g_noms = Nom_GoldenGlobe.sum(axis=1)
total_g_wins = Win_GoldenGlobe.sum(axis=1)

df['total_talent'] = total_g_noms + total_g_wins


revenue = df['revenue']
total_talent = df['total_talent']

# create a new df with unique films
new_df = df.groupby('Film_film').agg({'budget': 'first', 'total_talent': 'sum', 'revenue': 'first', 'Rating_IMDB_actor': 'first'}).reset_index()
new_df.to_csv("simplified.csv", index=False)
genre_columns = [col for col in df.columns if col.startswith("Genre_") and col.endswith("_actor") or col.startswith("Film_film") or col.startswith("budget")]
# print(genre_columns)


genre_counts = {}

# Iterate through the columns
for column in df.columns:
    if column.startswith("Genre") and column.endswith("actor"):
        genre = column.split("_")[1]  # Extract the genre name
        genre_count = df[column].sum()  # Sum of values in the column
        if genre_count > 0:
            genre_counts[genre] = genre_counts.get(genre, 0) + genre_count

# Calculate the average budget for each genre
for genre in genre_counts:
    genre_counts[genre] = int(df[df["Genre_" + genre + "_actor"] == 1]["budget"].mean())

plt.figure(figsize=(8, 8))
plt.pie(genre_counts.values(), labels=['']*len(genre_counts), autopct='%1.1f%%', startangle=140)

# Add a legend with genre labels
plt.legend(genre_counts.keys(), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that the pie chart is circular.
plt.title("Budget Distribution by Genre")
plt.show()
# #--------------------------GENRE-------------------------------
#Create a new DataFrame from the dictionary
genre_df = pd.DataFrame(list(genre_counts.items()), columns=["Genre", "Count"])
genre_df = genre_df.sort_values(by="Count", ascending=False)

print(genre_df)
plt.figure(figsize=(8, 8))

plt.pie(genre_df["Count"],  autopct=lambda p: f"{p:.1f}%" if p >= 1.5 else '', startangle=140)
plt.legend(genre_df["Genre"], title="Genres", loc="center left", bbox_to_anchor=(1, 0.5))

plt.axis('equal')  # Equal aspect ratio ensures that the pie chart is circular.

plt.title("Genre Distribution")

# Display the pie chart
plt.show()
#--------------------------GENRE-------------------------------
# Create a scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(new_df['budget'], new_df['Rating_IMDB_actor'], alpha=0.5)
plt.title('Rating vs. budget')
plt.xlabel('budget')
plt.ylabel('Rating')
plt.grid(True)

# Display the plot
plt.show()

